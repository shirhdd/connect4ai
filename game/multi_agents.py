import numpy as npimport abc# import util# from game import Agent, Actionfrom collections import Counterimport numpy as npimport randomfrom game_state import Connect4GameState, PLAYER_ONE, PLAYER_TWOclass Agent(object):    def __init__(self):        super(Agent, self).__init__()    @abc.abstractmethod    def get_action(self, game_state):        return    def stop_running(self):        pass# class ReflexAgent(Agent):#     """#     A reflex agent chooses an action at each choice point by examining#     its alternatives via a state evaluation function.##     The code below is provided as a guide.  You are welcome to change#     it in any way you see fit, so long as you don't touch our method#     headers.#     """##     def get_action(self, game_state):#         """#         You do not need to change this method, but you're welcome to.##         get_action chooses among the best options according to the evaluation function.##         get_action takes a game_state and returns some Action.X for some X in the set {UP, DOWN, LEFT, RIGHT, STOP}#         """##         # Collect legal moves and successor states#         legal_moves = game_state.get_agent_legal_actions()##         # Choose one of the best actions#         scores = [self.evaluation_function(game_state, action) for action in legal_moves]#         best_score = max(scores)#         best_indices = [index for index in range(len(scores)) if scores[index] == best_score]#         chosen_index = np.random.choice(best_indices)  # Pick randomly among the best##         "Add more of your code here if you want to"##         return legal_moves[chosen_index]##     def evaluation_function(self, current_game_state, action):#         """#         Design a better evaluation function here.##         The evaluation function takes in the current and proposed successor#         GameStates (GameState.py) and returns a number, where higher numbers are better.##         """##         # Useful information you can extract from a GameState (game_state.py)##         successor_game_state = current_game_state.generate_successor(action=action)#         board = successor_game_state.board#         max_tile = successor_game_state.max_tile##         score = successor_game_state.score##         "*** YOUR CODE HERE ***"#         max_ind = len(board) - 1#         diff = 0#         for i in range(max_ind):#             for j in range(max_ind):#                 cur_val = board[i][j]#                 if i != len(board) - 1 and cur_val != 0 and board[i + 1][j] != 0:#                     diff += abs(board[i][j] - board[i + 1][j])#                 if j != len(board) - 1 and cur_val != 0 and board[i][j + 1] != 0:#                     diff += abs(board[i][j] - board[i][j + 1])##         return len(successor_game_state.get_empty_tiles()[0]) * 70 + score * 0.3 + max_tile - diff * 10#def score_evaluation_function(current_game_state, piece):    """    This default evaluation function just returns the score of the state.    The score is the same one displayed in the GUI.    This evaluation function is meant for use with adversarial search agents    (not reflex agents).    """    score = 0    opponent_piece = 1 if piece == 2 else 2    score += current_game_state.get_all_four(piece)    score -= current_game_state.get_all_four(opponent_piece)    return score    streak = current_game_state.find_largest_streak(piece)    if streak == 4:        score += np.inf    elif streak == 3:        score += 50    elif streak == 2:        score += 20    opponent_streak = current_game_state.find_largest_streak(opponent_piece)    if opponent_streak == 3:        score -= 30    if opponent_streak == 4:        score -= 200    if opponent_streak == 2:        score -= 10    print("score: ", score)    return scoreclass MultiAgentSearchAgent(Agent):    """    This class provides some common elements to all of your    multi-agent searchers.  Any methods defined here will be available    to the MinmaxAgent, AlphaBetaAgent & ExpectimaxAgent.    You *do not* need to make any changes here, but you can if you want to    add functionality to all your adversarial search agents.  Please do not    remove anything, however.    Note: this is an abstract class: one that should not be instantiated.  It's    only partially specified, and designed to be extended.  Agent (game.py)    is another abstract class.    """    def __init__(self, evaluation_function='scoreEvaluationFunction', depth=3):        self.evaluation_function = score_evaluation_function        self.depth = 3    @abc.abstractmethod    def get_action(self, game_state):        return# class MinmaxAgent(MultiAgentSearchAgent):#     def get_action(self, game_state):#         """#         Returns the minimax action from the current gameState using self.depth#         and self.evaluationFunction.##         Here are some method calls that might be useful when implementing minimax.##         game_state.get_legal_actions(agent_index):#             Returns a list of legal actions for an agent#             agent_index=0 means our agent, the opponent is agent_index=1##         Action.STOP:#             The stop direction, which is always legal##         game_state.generate_successor(agent_index, action):#             Returns the successor game state after an agent takes an action#         """#         """*** YOUR CODE HERE ***"""##         chosen_action = -1#         biggest_val = -np.inf##         for action in game_state.get_legal_actions():#             successor = game_state.generate_successor(action, 1)#             cur_val = self.helper(successor, (self.depth * 2) - 1, 0)##             if cur_val > biggest_val:#                 biggest_val = cur_val#                 chosen_action = action##         return chosen_action##     def helper(self, game_state, depth, agent_index):#         if depth == 0 or game_state.done:#             return self.evaluation_function(game_state, agent_index + 1)##         if agent_index == 1:#             chosen = -np.inf#             for action in game_state.get_legal_actions():#                 chosen = max(chosen, self.helper(game_state.generate_successor(action, agent_index), depth - 1, 0))#         else:#             chosen = np.inf#             for action in game_state.get_legal_actions():#                 chosen = min(chosen, self.helper(game_state.generate_successor(action, agent_index), depth - 1, 1))#         return chosen#class AlphaBetaAgent(MultiAgentSearchAgent):    """    Your minimax agent with alpha-beta pruning (question 3)    """    def get_action(self, game_state):        """        Returns the minimax action using self.depth and self.evaluationFunction        """        """*** YOUR CODE HERE ***"""        alpha = -np.inf        beta = np.inf        chosen_action = -1        biggest_val = -np.inf        for action in game_state.get_legal_actions():            successor = game_state.generate_successor(action, 1)            alpha = self.helper(successor, (2 * self.depth) - 1, 0, alpha,                                beta)            if alpha > biggest_val:                biggest_val = alpha                chosen_action = action            if beta <= alpha:                break        return chosen_action    def helper(self, game_state, depth, agent_index, alpha, beta):        if depth == 0 or game_state.done:            return self.evaluation_function(game_state, agent_index+1)        if agent_index == 1:            for action in game_state.get_legal_actions():                suc = game_state.generate_successor(action, agent_index)                alpha = max(alpha, self.helper(suc, depth - 1, 0, alpha, beta))                if beta <= alpha:                    break            return alpha        else:            for action in game_state.get_legal_actions():                suc = game_state.generate_successor(action, agent_index)                beta = min(beta, self.helper(suc, depth - 1, 1, alpha, beta))                if beta <= alpha:                    break            return betaclass MonteCarloAgent:    def __init__(self, simulations=100):        self.simulations = simulations    def get_action(self, game_state):        legal_moves = game_state.get_legal_actions()        best_move = None        best_win_rate = -1        for move in legal_moves:            win_rate = self.simulate_move(game_state, move, self.simulations)            if win_rate > best_win_rate:                best_win_rate = win_rate                best_move = move        return best_move    def simulate_move(self, game_state, move, simulations):        wins = 0        for _ in range(simulations):            if self.simulate_game(game_state, move):                wins += 1        # print("wins", wins)        return wins / simulations    def simulate_game(self, game_state, move):        state = game_state.generate_successor(move, 0)        current_player = 1        while not state.done:            legal_moves = state.get_legal_actions()            if not legal_moves:                break            next_move = random.choice(legal_moves)            state = state.generate_successor(next_move, current_player)            current_player = 1 - current_player        # state.print_board()        return state.winning_move(PLAYER_ONE)def monteCarlo_evaluation_function(current_game_state):    return current_game_state.winning_move(        1) or current_game_state.winning_move(2)